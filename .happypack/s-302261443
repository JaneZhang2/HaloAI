

"use strict";Object.defineProperty(exports,"__esModule",{value:true});
var _normalizeNativeEvent=require('./../../modules/react-lib/normalizeNativeEvent');var _normalizeNativeEvent2=_interopRequireDefault(_normalizeNativeEvent);
var _TouchHistoryMath=require('./../../modules/react-lib/TouchHistoryMath');var _TouchHistoryMath2=_interopRequireDefault(_TouchHistoryMath);
var _index=require('./../../apis/Dimensions/index.web');var _index2=_interopRequireDefault(_index);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var currentCentroidXOfTouchesChangedAfter=
_TouchHistoryMath2.default.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter=
_TouchHistoryMath2.default.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter=
_TouchHistoryMath2.default.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter=
_TouchHistoryMath2.default.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX=_TouchHistoryMath2.default.currentCentroidX;
var currentCentroidY=_TouchHistoryMath2.default.currentCentroidY;
var _cw_scale=_index2.default.get('window').scale;
var PanResponder={

_initializeGestureState:function _initializeGestureState(gestureState){
gestureState.moveX=0;
gestureState.moveY=0;
gestureState.x0=0;
gestureState.y0=0;
gestureState.dx=0;
gestureState.dy=0;
gestureState.vx=0;
gestureState.vy=0;
gestureState.numberActiveTouches=0;

gestureState._accountsForMovesUpTo=0;
},
_updateGestureStateOnMove:function _updateGestureStateOnMove(gestureState,touchHistory){
gestureState.numberActiveTouches=touchHistory.numberActiveTouches;
gestureState.moveX=currentCentroidXOfTouchesChangedAfter(
touchHistory,
gestureState._accountsForMovesUpTo);

gestureState.moveY=currentCentroidYOfTouchesChangedAfter(
touchHistory,
gestureState._accountsForMovesUpTo);

var movedAfter=gestureState._accountsForMovesUpTo;
var prevX=previousCentroidXOfTouchesChangedAfter(touchHistory,movedAfter)/_cw_scale;
var x=currentCentroidXOfTouchesChangedAfter(touchHistory,movedAfter)/_cw_scale;
var prevY=previousCentroidYOfTouchesChangedAfter(touchHistory,movedAfter)/_cw_scale;
var y=currentCentroidYOfTouchesChangedAfter(touchHistory,movedAfter)/_cw_scale;
var nextDX=gestureState.dx+(x-prevX);
var nextDY=gestureState.dy+(y-prevY);


var dt=
touchHistory.mostRecentTimeStamp-gestureState._accountsForMovesUpTo;
gestureState.vx=(nextDX-gestureState.dx)/dt;
gestureState.vy=(nextDY-gestureState.dy)/dt;

gestureState.dx=nextDX;
gestureState.dy=nextDY;
gestureState._accountsForMovesUpTo=touchHistory.mostRecentTimeStamp;
},
































create:function create(config){
var gestureState={

stateID:Math.random()};

PanResponder._initializeGestureState(gestureState);
var panHandlers={
onStartShouldSetResponder:function onStartShouldSetResponder(e){
return config.onStartShouldSetPanResponder===undefined?false:
config.onStartShouldSetPanResponder(normalizeEvent(e),gestureState);
},
onMoveShouldSetResponder:function onMoveShouldSetResponder(e){
e.preventDefault();
return config.onMoveShouldSetPanResponder===undefined?false:
config.onMoveShouldSetPanResponder(normalizeEvent(e),gestureState);
},
onStartShouldSetResponderCapture:function onStartShouldSetResponderCapture(e){


if(e.nativeEvent.touches){
if(e.nativeEvent.touches.length===1){
PanResponder._initializeGestureState(gestureState);
}
}else
if(e.nativeEvent.type==='mousedown'){
PanResponder._initializeGestureState(gestureState);
}
gestureState.numberActiveTouches=e.touchHistory.numberActiveTouches;
return config.onStartShouldSetPanResponderCapture!==undefined?
config.onStartShouldSetPanResponderCapture(normalizeEvent(e),gestureState):false;
},

onMoveShouldSetResponderCapture:function onMoveShouldSetResponderCapture(e){
e.preventDefault();
var touchHistory=e.touchHistory;



if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){
return false;
}
PanResponder._updateGestureStateOnMove(gestureState,touchHistory);
return config.onMoveShouldSetPanResponderCapture?
config.onMoveShouldSetPanResponderCapture(normalizeEvent(e),gestureState):false;
},

onResponderGrant:function onResponderGrant(e){
gestureState.x0=currentCentroidX(e.touchHistory);
gestureState.y0=currentCentroidY(e.touchHistory);
gestureState.dx=0;
gestureState.dy=0;
config.onPanResponderGrant&&config.onPanResponderGrant(normalizeEvent(e),gestureState);

return true;


},

onResponderReject:function onResponderReject(e){
config.onPanResponderReject&&config.onPanResponderReject(normalizeEvent(e),gestureState);
},

onResponderRelease:function onResponderRelease(e){
config.onPanResponderRelease&&config.onPanResponderRelease(normalizeEvent(e),gestureState);
PanResponder._initializeGestureState(gestureState);
panHandlers.moveShould=null;
},

onResponderStart:function onResponderStart(e){
var touchHistory=e.touchHistory;
gestureState.numberActiveTouches=touchHistory.numberActiveTouches;
config.onPanResponderStart&&config.onPanResponderStart(normalizeEvent(e),gestureState);
},

onResponderMove:function onResponderMove(e){
var touchHistory=e.touchHistory;


if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){
return;
}


PanResponder._updateGestureStateOnMove(gestureState,touchHistory);
config.onPanResponderMove&&config.onPanResponderMove(normalizeEvent(e),gestureState);
},

onResponderEnd:function onResponderEnd(e){
var touchHistory=e.touchHistory;
gestureState.numberActiveTouches=touchHistory.numberActiveTouches;
config.onPanResponderEnd&&config.onPanResponderEnd(normalizeEvent(e),gestureState);
panHandlers.moveShould=null;
},

onResponderTerminate:function onResponderTerminate(e){
config.onPanResponderTerminate&&
config.onPanResponderTerminate(e,gestureState);

config.onPanResponderRelease&&config.onPanResponderRelease(normalizeEvent(e),gestureState);
PanResponder._initializeGestureState(gestureState);
panHandlers.moveShould=null;
},

onResponderTerminationRequest:function onResponderTerminationRequest(e){
console.log("TerminationRequest");
return config.onPanResponderTerminationRequest===undefined?true:
config.onPanResponderTerminationRequest(normalizeEvent(e),gestureState);
}};

return{panHandlers:panHandlers};
}};


function normalizeEvent(e){
var normalizedEvent=Object.create(e);
normalizedEvent.nativeEvent=(0,_normalizeNativeEvent2.default)(e.nativeEvent,e.type);
return normalizedEvent;
}exports.default=

PanResponder;module.exports=exports['default'];