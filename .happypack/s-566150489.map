{"version":3,"sources":["../../.npm-global/lib/node_modules/@ctrip/cw/node_modules/webpack/buildin/global.js"],"names":["g","Function","eval","e","window","module","exports"],"mappings":"6TAAA,GAAIA;;;AAGC,UAAW;AACf,MAAO,KAAP;AACA,CAFG,EAHJ;;AAOA,GAAI;;AAEHA,EAAIA,GAAKC,SAAS,aAAT,GAAL,EAAkC,CAAC,EAAEC,IAAH,EAAS,MAAT,CAAtC;AACA,CAAC,MAAMC,CAAN,CAAS;;AAEV,GAAG,OAAOC,OAAP,mCAAOA,MAAP,KAAkB,QAArB;AACCJ,EAAII,MAAJ;AACD;;;;;;AAMDC,OAAOC,OAAP,CAAiBN,CAAjB","file":"global.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"]}