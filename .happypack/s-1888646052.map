{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/apis/StyleSheet/cssName.js"],"names":["prefixes","cssMap","global","Range","textDecorationLine","rcamelize","camelize","target","indexOf","replace","match","charAt","toUpperCase","cssName","name","host","camelCase","document","documentElement","style","i","n","length"],"mappings":";;;;AAIA,GAAIA,UAAW,CAAC,EAAD,CAAK,UAAL,CAAiB,KAAjB,CAAwB,OAAxB,CAAiC,MAAjC,CAAf;AACA,GAAIC,QAAS;;AAET,QAASC,OAAOC,KAAP,CAAe,UAAf,CAA4B,YAF5B;AAGTC,mBAAoB,gBAHX,CAAb;;;;AAOA,GAAIC,WAAY,YAAhB;AACA,QAASC,SAAT,CAAkBC,MAAlB,CAA0B;;AAEtB,GAAI,CAACA,MAAD,EAAWA,OAAOC,OAAP,CAAe,GAAf,EAAsB,CAAtB,EAA2BD,OAAOC,OAAP,CAAe,GAAf,EAAsB,CAAhE,CAAmE;AAC/D,MAAOD,OAAP;AACH;;AAED,MAAOA,QAAOE,OAAP,CAAeJ,SAAf,CAA0B,SAAUK,KAAV,CAAiB;AAC9C,MAAOA,OAAMC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAP;AACH,CAFM,CAAP;AAGH;;AAED,QAASC,QAAT,CAAiBC,IAAjB,CAAuBC,IAAvB,CAA6BC,SAA7B,CAAwC;AACpC,GAAIf,OAAOa,IAAP,CAAJ,CAAkB;AACd,MAAOb,QAAOa,IAAP,CAAP;AACH;AACD,GAAG,CAACC,IAAJ,CAAS;AACL,GAAGb,OAAOe,QAAV,CAAmB;AAChBF,KAAMb,OAAOe,QAAP,CAAgBC,eAAhB,CAAgCC,KAAtC;AACF,CAFD,IAEK;AACDJ,KAAK,EAAL;AACH;AACJ;AACD,IAAK,GAAIK,GAAI,CAAR,CAAWC,EAAIrB,SAASsB,MAA7B,CAAqCF,EAAIC,CAAzC,CAA4CD,GAA5C,CAAiD;AAC7CJ,UAAYV,SAASN,SAASoB,CAAT,EAAcN,IAAvB,CAAZ;AACA,GAAIE,YAAaD,KAAjB,CAAuB;AACnB,MAAQd,QAAOa,IAAP,EAAeE,SAAvB;AACH;AACJ;AACD,MAAO,KAAP;AACH,C;;AAEcH,O","file":"cssName.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["/**\r\n* 修正CSS的样式名，不限于加厂商前缀，改用其他名字，并缓存起来，以减少重复计算\r\n*/\r\n\r\nlet prefixes = ['', '-webkit-', '-o-', '-moz-', '-ms-']\r\nlet cssMap = {\r\n    //支持Range对象,肯定可以使用cssFloat\r\n    'float': global.Range ? 'cssFloat' : 'styleFloat',\r\n    textDecorationLine: 'textDecoration' //react native的下划线与浏览器的名字不一\r\n}\r\n\r\n\r\nlet rcamelize = /[-_][^-_]/g;\r\nfunction camelize(target) {\r\n    //提前判断，提高getStyle等的效率\r\n    if (!target || target.indexOf('-') < 0 && target.indexOf('_') < 0) {\r\n        return target\r\n    }\r\n    //转换为驼峰风格\r\n    return target.replace(rcamelize, function (match) {\r\n        return match.charAt(1).toUpperCase()\r\n    })\r\n}\r\n\r\nfunction cssName(name, host, camelCase) {\r\n    if (cssMap[name]) {\r\n        return cssMap[name]\r\n    }\r\n    if(!host){\r\n        if(global.document){\r\n           host= global.document.documentElement.style;\r\n        }else{\r\n            host={};\r\n        }\r\n    }\r\n    for (let i = 0, n = prefixes.length; i < n; i++) {\r\n        camelCase = camelize(prefixes[i] + name)\r\n        if (camelCase in host) {\r\n            return (cssMap[name] = camelCase)\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport default cssName\r\n\r\n"]}