{"version":3,"sources":["../../.npm-global/lib/node_modules/@ctrip/cw/node_modules/fbjs/lib/invariant.js"],"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","module","exports"],"mappings":";;;;;;;;AAQA;;;;;;;;;;;;;AAaA,GAAIA,gBAAiB,UAAgC,CAAE,CAAvD;;AAEA,GAAIC,QAAQC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C;AACzCH,eAAiB,SAAwBI,MAAxB,CAAgC;AAC/C,GAAIA,SAAWC,SAAf,CAA0B;AACxB,KAAM,IAAIC,MAAJ,CAAU,8CAAV,CAAN;AACD;AACF,CAJD;AAKD;;AAED,QAASC,UAAT,CAAmBC,SAAnB,CAA8BJ,MAA9B,CAAsCK,CAAtC,CAAyCC,CAAzC,CAA4CC,CAA5C,CAA+CC,CAA/C,CAAkDC,CAAlD,CAAqDC,CAArD,CAAwD;;;;AAIhDC,KAJgD;;;;AAQ9CC,IAR8C;AAS9CC,QAT8C,CACtDjB,eAAeI,MAAf,EAEA,GAAI,CAACI,SAAL,CAAgB,CAEd,GAAIJ,SAAWC,SAAf,CAA0B,CACxBU,MAAQ,GAAIT,MAAJ,CAAU,qEAAuE,6DAAjF,CAAR,CACD,CAFD,IAEO,CACDU,IADC,CACM,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CADN,CAEDG,QAFC,CAEU,CAFV;AAGLF,MAAQ,GAAIT,MAAJ,CAAUF,OAAOc,OAAP,CAAe,KAAf,CAAsB,UAAY;AAClD,MAAOF,MAAKC,UAAL,CAAP;AACD,CAFiB,CAAV,CAAR;AAGAF,MAAMI,IAAN,CAAa,qBAAb;AACD;;AAEDJ,MAAMK,WAAN,CAAoB,CAApB;AACA,KAAML,MAAN;AACD;AACF;;AAEDM,OAAOC,OAAP,CAAiBf,SAAjB","file":"invariant.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"]}