{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/apis/StyleSheet/fixBoxShadow.js"],"names":["colorToRgba","input","alfa","int32Color","r","g","b","a","parseFloat","isNaN","fixBoxShadow","style","result","value","shadowOffset","push","width","height","shadowRadius","shadowColor","shadowOpacity","length","boxShadow","join","boxShadowObj","names","handle"],"mappings":";AACA,kC;AACA,wE;;;AAGA,GAAIA,aAAa,SAAUC,KAAV,CAAgBC,IAAhB,CAAsB;AACnC,GAAIC,YAAa,6BAAeF,KAAf,CAAjB;AACA,GAAIE,aAAe,IAAnB,CAAyB;AACrB,MAAOF,MAAP;AACH;;AAEDE,WAAaA,YAAc,CAA3B;;AAEA,GAAIC,GAAI,CAACD,WAAa,UAAd,IAA8B,EAAtC;AACA,GAAIE,GAAI,CAACF,WAAa,UAAd,IAA8B,EAAtC;AACA,GAAIG,GAAI,CAACH,WAAa,UAAd,IAA8B,CAAtC;AACA,GAAII,GAAEC,WAAWN,IAAX,CAAN;AACA,GAAGO,MAAMF,CAAN,CAAH,CAAY;AACR,aAAcH,CAAd,MAAoBC,CAApB,MAA0BC,CAA1B;AACH,CAFD,IAEK;AACD,cAAeF,CAAf,MAAqBC,CAArB,MAA2BC,CAA3B,MAAiCC,CAAjC;AACH;;AAEJ,CAlBD;;;;;;;;;;AA4BA,GAAIG,cAAc,SAASC,KAAT,CAAgBC,MAAhB,CAAwB;AACtC,GAAIC,OAAQ,EAAZ;AACA,GAAIF,MAAMG,YAAV,CAAwB;AACpBD,MAAME,IAAN,CAAW,sBAAQJ,MAAMG,YAAN,CAAmBE,KAAnB,EAA4B,CAApC,CAAuC,OAAvC,CAAX;AACAH,MAAME,IAAN,CAAW,sBAAQJ,MAAMG,YAAN,CAAmBG,MAAnB,EAA6B,CAArC,CAAwC,QAAxC,CAAX;AACH;AACD,GAAIN,MAAMO,YAAV,CAAwB;AACpBL,MAAME,IAAN,CAAW,sBAAQJ,MAAMO,YAAd,CAA4B,cAA5B,CAAX;AACH;AACD,GAAIP,MAAMQ,WAAV,CAAuB;AACnB,GAAIC,eAAcZ,WAAWG,MAAMS,aAAjB,CAAlB;AACAP,MAAME,IAAN;AACIN,MAAMW,aAAN;AACMT,MAAMQ,WADZ;AAEMnB,YAAYW,MAAMQ,WAAlB,CAA+BC,aAA/B,CAHV;;AAKA,MAAOT,OAAM,eAAN,CAAP;AACH;AACD,GAAIE,MAAMQ,MAAN,CAAe,CAAnB,CAAsB;AAClBT,OAAOU,SAAP,CAAmBT,MAAMU,IAAN,CAAW,GAAX,CAAnB;AACH;AACJ,CArBD;;;;AAyBA,GAAIC,cAAe;AACfC,MAAO;AACHX,aAAc,IADX;AAEHI,aAAc,IAFX;AAGHC,YAAa,IAHV;AAIHC,cAAe,IAJZ,CADQ;;AAOfM,OAAOhB,YAPQ,CAAnB,C;;;AAUec,Y","file":"fixBoxShadow.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["\r\nimport fixUnit from './fixUnit';\r\nimport normalizeColor from './../../modules/react-lib/normalizeColor';\r\n\r\n\r\nlet colorToRgba =function (input,alfa) {\r\n    let int32Color = normalizeColor(input);\r\n    if (int32Color === null) {\r\n        return input;\r\n    }\r\n\r\n    int32Color = int32Color || 0; // $FlowIssue\r\n\r\n    let r = (int32Color & 0xff000000) >>> 24;\r\n    let g = (int32Color & 0x00ff0000) >>> 16;\r\n    let b = (int32Color & 0x0000ff00) >>> 8;\r\n    let a=parseFloat(alfa);\r\n    if(isNaN(a)){\r\n        return `rgb(${r}, ${g}, ${b})`;\r\n    }else{\r\n        return `rgba(${r}, ${g}, ${b}, ${a})`;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @method fixBoxShadow\r\n * @type function\r\n * @param {object} style\r\n * @param {object} result\r\n * @discription:\r\n * box-shadow: h-shadow v-shadow blur spread color inset;\r\n */\r\nlet fixBoxShadow =function(style, result) {\r\n    let value = [];\r\n    if (style.shadowOffset) {\r\n        value.push(fixUnit(style.shadowOffset.width || 0, 'width'));\r\n        value.push(fixUnit(style.shadowOffset.height || 0, 'height'));\r\n    }\r\n    if (style.shadowRadius) {\r\n        value.push(fixUnit(style.shadowRadius, 'shadowRadius'));\r\n    }\r\n    if (style.shadowColor) {\r\n        let shadowOpacity=parseFloat(style.shadowOpacity);\r\n        value.push(\r\n            isNaN(shadowOpacity)\r\n                ? style.shadowColor\r\n                : colorToRgba(style.shadowColor, shadowOpacity)\r\n        );\r\n        delete style['shadowOpacity'];\r\n    }\r\n    if (value.length > 0) {\r\n        result.boxShadow = value.join(' ');//here must be result\r\n    }\r\n}\r\n\r\n\r\n\r\nlet boxShadowObj = {\r\n    names: {\r\n        shadowOffset: true,\r\n        shadowRadius: true,\r\n        shadowColor: true,\r\n        shadowOpacity: true\r\n    },\r\n    handle:fixBoxShadow\r\n}\r\n\r\nexport default boxShadowObj;\r\n\r\n\r\n"]}