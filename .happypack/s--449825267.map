{"version":3,"sources":["node_modules/@ctrip/crnweb/src/crn/lib/Device.js"],"names":["metric","Dimensions","get","oDeviceOptions","ua","global","document","navigator","userAgent","android","match","iphone","wp","ipad","device","winphone","deviceType","isPhoneX","indexOf","h","screen","height","w","width","e","osVersionFunc","typeObj","osVersion","exp","replace","isPadFunc","Device","statusBarStyle","StatusBar","setBarStyle","callback","list","screenWidth","screenHeight","imsi","imei","idfa","isiPhoneX","isJailBreak","isPad","deviceInfo"],"mappings":"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","file":"Device.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["import {StatusBar, Dimensions} from 'react-native';\r\nimport isFunction from './Util/isFunction';\r\nlet metric = Dimensions.get('window');\r\n\r\nlet oDeviceOptions = (function () {\r\n    let ua=\"\";\r\n    if(global.document){\r\n        ua = navigator.userAgent;\r\n    }\r\n\r\n    let android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\r\n    let iphone = ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\r\n    let wp = ua.match(/globals Phone ([\\d.]+)/);\r\n    let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\r\n    let device = android ? \"android\" : (iphone ? \"iphone\" : ( wp ? \"winphone\" : (ipad ? \"ipad\" : \"\")));\r\n    return {\r\n        android: android,\r\n        iphone: iphone,\r\n        winphone: wp,\r\n        ipad: ipad,\r\n        deviceType: device,\r\n        isPhoneX(){\r\n            try {\r\n                if (ua.indexOf(\"iPhoneX\") !== -1) {\r\n                    return true;\r\n                }\r\n                if(global.document){\r\n                    let h = global.screen.height, w = global.screen.width;\r\n                    if (h === 812 || w === 812) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n            } catch (e) {\r\n            }\r\n            return false;\r\n        },\r\n        osVersionFunc() {\r\n            let typeObj = this;\r\n            let osVersion = \"\";\r\n            if (typeObj.deviceType) {\r\n                let exp = typeObj[typeObj.deviceType];\r\n                if (typeObj.android) {\r\n                    osVersion = exp[2];\r\n                } else if (typeObj.iphone) {\r\n                    osVersion = exp[2].replace(/_/g, '.');\r\n                } else if (typeObj.winphone) {\r\n                    osVersion = exp[1]\r\n                } else if (typeObj.ipad) {\r\n                    osVersion = exp[2].replace(/_/g, '.');\r\n                }\r\n            }\r\n            return osVersion\r\n        },\r\n        isPadFunc() {\r\n            if (this.ipad) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };//return obj\r\n})();\r\n\r\nclass Device {\r\n\r\n    static getDeviceType() {\r\n        return oDeviceOptions.deviceType;\r\n    }\r\n\r\n    static deviceType = oDeviceOptions.deviceType;\r\n\r\n    static screenWidth = metric.width;\r\n    static screenHeight = metric.height;\r\n    static imsi = \"\";\r\n    static imei = \"\";\r\n    static idfa = \"\";\r\n    static isiPhoneX = oDeviceOptions.isPhoneX();\r\n    static isJailBreak = null;\r\n    static isPad = oDeviceOptions.isPadFunc();\r\n    static osVersion = oDeviceOptions.osVersionFunc();\r\n    static deviceInfo = {};\r\n\r\n    /**\r\n     * 设置状态栏的样式\r\n     * @param statusBarStyle\r\n     * @enum('lightContent', 'darkContent')\r\n     */\r\n    static setStatusBarStyle(statusBarStyle) {\r\n        StatusBar.setBarStyle(statusBarStyle);\r\n    }\r\n\r\n    /**\r\n     * 是否打开推送开关，H5下是没有推送的\r\n     */\r\n    static isRemoteNotificationEnabled(callback) {\r\n        isFunction(callback) ? callback(false) : \"\";\r\n    }\r\n\r\n    /**\r\n     * H5下是无法判断是否安装某些App的\r\n     * @param list\r\n     * @param callback\r\n     */\r\n    static getAppsInstallStatus(list, callback) {\r\n        isFunction(callback) ? callback(false) : \"\";\r\n    }\r\n}\r\n\r\nexport default Device;"]}