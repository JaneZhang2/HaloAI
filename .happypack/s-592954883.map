{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/apis/PixelRatio/index.web.js"],"names":["dimWin","Dimensions","get","PixelRatio","scale","layoutSize","Math","round","ratio"],"mappings":";;AAEA,gD;;AAEA,GAAIA,QAASC,gBAAWC,GAAX,CAAe,QAAf,CAAb,C;AACMC,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BS;AACX,MAAOH,QAAOI,KAAd;AACD,C;;;;;;;;AAQqB;AACpB,MAASD,YAAWD,GAAX,EAAT;AACD,C;;;;;;;;;;;AAWgCG,U,CAAY;AAC3C,MAAOC,MAAKC,KAAL,CAAWF,WAAaF,WAAWD,GAAX,EAAxB,CAAP;AACD,C;;;;;;;;;;;;;AAa0BG,U,CAAY;AACrC,GAAMG,OAAQL,WAAWD,GAAX,EAAd;AACA,MAAOI,MAAKC,KAAL,CAAWF,WAAaG,KAAxB,EAAiCA,KAAxC;AACD,C;;;AAGYL,U","file":"index.web.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["\r\n\r\nimport Dimensions from './../Dimensions/index.web'\r\n\r\nlet dimWin = Dimensions.get('window');\r\nclass PixelRatio {\r\n  /**\r\n   * @method get\r\n   * @description 返回设备的像素密度。例如：\r\n   *\r\n   * ** PixelRatio.get() === 1 **\r\n   * - mdpi Android 设备 (160 dpi)\r\n   *\r\n   * ** PixelRatio.get() === 1.5 **\r\n   * - hdpi Android 设备 (240 dpi)\r\n   *\r\n   * ** PixelRatio.get() === 2 **\r\n   * - iPhone 4, 4S\r\n   * - iPhone 5, 5c, 5s\r\n   * - iPhone 6\r\n   * - xhdpi Android 设备 (320 dpi)\r\n   *\r\n   * **  PixelRatio.get() === 3 **\r\n   * - iPhone 6 plus\r\n   * - xxhdpi Android 设备 (480 dpi)\r\n   *\r\n   * **  PixelRatio.get() === 3.5 **\r\n   * - Nexus 6\r\n   */\r\n\r\n  /**\r\n   * Returns the device pixel density.\r\n   */\r\n  static get() {\r\n    return dimWin.scale\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * No equivalent for Web\r\n   */\r\n  static getFontScale() {\r\n    return   PixelRatio.get()\r\n  }\r\n\r\n  /**\r\n   * @method getPixelSizeForLayoutSize\r\n   * @param {number} layoutSize 布局尺寸\r\n   * @description 将布局尺寸（dp）转换为像素尺寸（px），返回一个整数值。\r\n   */\r\n  /**\r\n   * Converts a layout size (dp) to pixel size (px).\r\n   * Guaranteed to return an integer number.\r\n   */\r\n  static getPixelSizeForLayoutSize(layoutSize) {\r\n    return Math.round(layoutSize * PixelRatio.get())\r\n  }\r\n\r\n  /**\r\n   * @method roundToNearestPixel\r\n   * @param {number} layoutSize 布局尺寸\r\n   * @description 得到一个布局尺寸转化为像素尺寸保留整数时最接近的布局尺寸值。例如，在一个PixelRatio为3的设备中，`PixelRatio.roundToNearestPixel(8.4) = 8.333333333333334`, 因为 `(8.33 * 3) = 25 px`, 25px是8.4dp在3像素密度的情况下最接近的px值。\r\n   */\r\n  /**\r\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\r\n   * an integer number of pixels. For example, on a device with a PixelRatio\r\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\r\n   * exactly (8.33 * 3) = 25 pixels.\r\n   */\r\n  static roundToNearestPixel(layoutSize) {\r\n    const ratio = PixelRatio.get()\r\n    return Math.round(layoutSize * ratio) / ratio\r\n  }\r\n}\r\n\r\nexport default PixelRatio\r\n"]}