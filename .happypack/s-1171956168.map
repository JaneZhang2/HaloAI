{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/apis/StyleSheet/StyleSheet.web.js"],"names":["absoluteFillObject","position","left","right","top","bottom","absoluteFill","defaultStyleMap","borderStyle","borderColor","merge","result","computedStyle","key","fixAndFlatten","style","compType","Array","isArray","hasFixed","i","length","StyleSheet","hairlineWidth","PixelRatio","get","flatten","flattenStyle","create","obj","className","fix","component","props","useFlexbox","indexOf","inject","css","global","document","createElement","innerHTML","head","appendChild"],"mappings":"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","file":"StyleSheet.web.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["/*\r\n *\r\n * @providesModule StyleSheet\r\n */\r\n\r\n/**\r\n * StyleSheet\r\n *\r\n * @component StyleSheet\r\n * @example ./StyleSheet.js[1-52]\r\n * @version >=v1.4.0\r\n * @description  StyleSheet提供了类似 CSS 样式表的抽象。\r\n *\r\n * #### 声明样式\r\n * ```\r\n * let styles = StyleSheet.create({});\r\n * ```\r\n *\r\n * StyleSheet.create()可将样式值转化为数字id，指向内部样式表，使得样式不可更改和不可见。本项目会自动抹平浏览器差异，对样式进行兼容处理。\r\n *\r\n * 将样式声明放到文件的末尾处，可保证在应用中只被创建一次。在render中直接创建样式对象，每次渲染都会被重复创建。\r\n *\r\n *\r\n * #### 使用样式\r\n * 所有核心组件都可以接受style属性。\r\n *\r\n * 可接受一个style\r\n * ```\r\n * <View style={styles.container} />\r\n * ```\r\n * 也可以以数组的形式接受多个style,最右侧优先级越高，否定值（如false，undefined，null）会被忽略。\r\n * ```\r\n * <View style={[styles.base, styles.background, this.state.active && styles.active]} />\r\n * ```\r\n * 也可在render中建立，但会重复渲染，不推荐。\r\n * ```\r\n * <Text style={{color:'red'}}>hello</Text>\r\n * ```\r\n * #### 作为参数调用\r\n * 你可以将样式作为参数进行传递，可使用 `View.propTypes.style` 和 `Text.propType.style` 来确保参数是style类型的。\r\n * ```\r\n * propTypes: {\r\n *   style: View.propTypes.style\r\n * }\r\n * ```\r\n *\r\n * 示例描述了StyleSheet应如何创建和使用。\r\n *\r\n * #### 注意事项\r\n * - 本组件将 React Native 中的 style 属性转换为 React web 属性，同时会兼容浏览器差异。如 flexbox 相关属性会根据浏览器所使用的flexbox规范进行兼容，增加浏览器厂商前缀等等，可放心使用。\r\n * - 本组件会将涉及到长度的不带单位样式值转化为rem，例如，width:10会自动变为width:'0.10 rem'。而对于那些需要保持 css 的独立性的样式值，如flex:1,则不会进行转换。\r\n * - 本组件几乎覆盖了 React Native 的全部style属性，除了 shadowOpacity(浏览器不支持)。\r\n * - 样式对象的键名应遵循驼峰风格，如borderColor，以达到最佳效果。\r\n *\r\n */\r\n\r\nimport fixStyleSheet from './fixStyleSheet';\r\nimport flattenStyle from './flattenStyle.web';\r\nimport PixelRatio from './../PixelRatio/index.web';\r\n\r\n\r\n\r\n\r\nconst absoluteFillObject = {\r\n  position: 'absolute',\r\n  left: 0,\r\n  right: 0,\r\n  top: 0,\r\n  bottom: 0,\r\n};\r\nconst absoluteFill = fixStyleSheet(absoluteFillObject);\r\n//维护一个默认值表，简化降低默认值优先级的逻辑\r\nconst defaultStyleMap={borderStyle:\"solid\",borderColor:'black'};\r\n\r\n\r\nfunction merge(result,computedStyle) {\r\n    for (let key in computedStyle) {\r\n        //first calculate value\r\n        if(!result[key]){\r\n            result[key] = computedStyle[key];\r\n        }else if(computedStyle[key]!=defaultStyleMap[key]){//存在则不用默认值,降低默认值优先级\r\n            result[key] = computedStyle[key];\r\n        }\r\n    }\r\n}\r\nlet fixAndFlatten = function (style,compType) {\r\n    if (!style) {\r\n        return {};\r\n    }\r\n    if (!Array.isArray(style)) {\r\n        if (style.hasFixed&&compType!=\"img\") {\r\n            delete style.hasFixed;\r\n        } else {\r\n            style = fixStyleSheet(style);\r\n        }\r\n        return style;\r\n    }\r\n\r\n    let result = {};\r\n    for (let i = 0; i < style.length; ++i) {\r\n\r\n        let computedStyle = fixAndFlatten(style[i],compType);\r\n        if (computedStyle) {\r\n            merge(result,computedStyle);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n\r\n\r\nlet StyleSheet = {\r\n\r\n   /**\r\n   * @property hairlineWidth\r\n   * @type static\r\n   * @description 这一常量定义了当前平台上的最细的宽度。可以用作边框或是两个元素间的分隔线,然而，你不能把它“视为一个常量”，因为不同的平台和不同的屏幕像素密度会导致不同的结果。在web上此值为1/PixelRatio.get()\r\n   */\r\n    hairlineWidth: 1 / PixelRatio.get(),\r\n\r\n    /**\r\n     * @property flatten\r\n     * @type function\r\n     * @param {array} array  style数组\r\n     * @description 将一个style数组转化为一个style对象。如果传入的是对象，则直接返回此对象，如果传入的值 == false，则返回undefined\r\n     */\r\n    flatten:flattenStyle,\r\n\r\n\r\n    /**\r\n     * @property absoluteFill\r\n     * @type object\r\n     * @description 一个可直接使用的绝对布局定位\r\n     *\r\n     * 它是由`{position:'absolute',left:0,right:0,top:0,bottom:0,}`变换过可直接使用的style，\r\n     *\r\n     * 可以直接`<View style={StyleSheet.absoluteFill}/>`使用\r\n     */\r\n    absoluteFill: absoluteFill,\r\n\r\n\r\n    /**\r\n     * @property absoluteFillObject\r\n     * @type object\r\n     * @description 一个便捷的绝对定位数组，它实际上就是`{position:'absolute',left:0,right:0,top:0,bottom:0,}`\r\n     *\r\n     * 你可以这样使用它：\r\n     *\r\n     * `const styles = StyleSheet.create({ wrapper: { ...StyleSheet.absoluteFillObject, top: 10, backgroundColor: 'transparent', }, });`\r\n     */\r\n    absoluteFillObject: absoluteFillObject,\r\n\r\n    /**\r\n     * @method create\r\n     * @param  {object} obj 描述样式的对象\r\n     * @return {object} stylesheet 样式表\r\n     * @description StyleSheet的构造函数，将样式值转化为数字id，指向内部样式表，使得样式不可更改和不可见。本项目会自动抹平浏览器差异，对样式进行兼容处理。\r\n     */\r\n    create: function (obj) {\r\n        for (let className in obj) {\r\n           obj[className] = fixStyleSheet(obj[className])\r\n           obj[className].hasFixed = true\r\n        }\r\n        return obj\r\n    },\r\n\r\n\r\n    fix: function (style, component,compType) {\r\n        // 如果是已经通过create创建的，不再进行fix，以此减少循环次数\r\n        style = fixAndFlatten(style,compType);\r\n        let props;\r\n        if(component&&component.props){//兼容以前的传入方式，props是不可扩展的，\r\n            props=component.props;\r\n        }else if(component){//在View中直接传入props\r\n            props=component\r\n        }\r\n\r\n        if (style.useFlexbox && props){\r\n            if (props.className && props.className.indexOf('rn-flex') === -1){\r\n                props.className += ' rn-flex';\r\n            } else if (!props.className){\r\n                props.className =  'rn-flex';\r\n            }\r\n\r\n            delete style.useFlexbox;\r\n        }\r\n\r\n        //绝对定位元素突破父元素宽度的限制\r\n        /*\r\n        if(style.position === \"absolute\" && !style.width){\r\n            style.width = '-webkit-max-content';\r\n        }\r\n        */\r\n        return style;\r\n    },\r\n\r\n\r\n    // 注入页面中的样式\r\n    inject: function(css) {\r\n        if(global.document){\r\n            let style = global.document.createElement('style');\r\n            style.innerHTML = css;\r\n            global.document.head.appendChild(style);\r\n        }//todo manbe we can put css in doc at server\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default StyleSheet;"]}