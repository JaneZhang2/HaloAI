{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/modules/wrapper/NativeMethodsWrapper/index.web.js"],"names":["mountSafeCallback","context","callback","isMounted","apply","arguments","WrappedComponent","NativeMethodsMixin","UIManager","measure","ReactDOM","findDOMNode","relativeToNativeNode","onSuccess","onFail","measureLayout","nativeProps","focus","blur"],"mappings":"AAAA,a;;;AAGA,wD;AACA,mC;AACA,gD;;;;;;;AAOA,GAAIA,mBAAoB,SAASC,OAAT,CAAkBC,QAAlB,CAA4B;AAChD,MAAO,WAAW;AACd,GAAI,CAACA,QAAD,EAAaD,QAAQE,SAAR,EAAqB,CAACF,QAAQE,SAAR,EAAvC,CAA4D;AACxD;AACH;AACD,MAAOD,UAASE,KAAT,CAAeH,OAAf,CAAwBI,SAAxB,CAAP;AACH,CALD;AAMH,CAPD,C;;AASe,SAACC,gBAAD,CAAsB;AAC3BC,kBAD2B;;;;;;;;;;;;;;;;;;;AAoBrBL,QApBqB,CAoBX;AACdM,gBAAUC,OAAV;AACIC,mBAASC,WAAT,CAAqB,IAArB,CADJ;AAEIX,kBAAkB,IAAlB,CAAwBE,QAAxB,CAFJ;;AAIH,CAzB4B;;;;;;;;;;AAmCfU,oBAnCe,CAmCOC,SAnCP,CAmCkBC,MAnClB,CAmC0B;AACnDN,gBAAUO,aAAV;AACIL,mBAASC,WAAT,CAAqB,IAArB,CADJ;AAEIC,oBAFJ;AAGIZ,kBAAkB,IAAlB,CAAwBc,MAAxB,CAHJ;AAIId,kBAAkB,IAAlB,CAAwBa,SAAxB,CAJJ;;AAMH,CA1C4B;;;;;;;;AAkDdG,WAlDc,CAkDD;AACxB,6BAAsBN,mBAASC,WAAT,CAAqB,IAArB,CAAtB,CAAkDK,WAAlD,CAA+D,IAA/D;AACH,CApD4B;;;;;;AA0DrB;AACJN,mBAASC,WAAT,CAAqB,IAArB,EAA2BM,KAA3B;AACH,CA5D4B;;;;;AAiEtB;AACHP,mBAASC,WAAT,CAAqB,IAArB,EAA2BO,IAA3B;AACH,CAnE4B,gCACAZ,gBADA;;;AAsEjC,MAAOC,mBAAP;AACH,C","file":"index.web.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["'use strict';\r\n\r\n\r\nimport UIManager from '../../../apis/UIManager/index.web';\r\nimport ReactDOM from 'react-dom';\r\nimport setNativeProps_import from './setNativeProps';\r\n\r\n\r\n/**\r\n * In the future, we should cleanup callbacks by cancelling them instead of\r\n * using this.\r\n */\r\nlet mountSafeCallback = function(context, callback) {\r\n    return function() {\r\n        if (!callback || context.isMounted && !context.isMounted()) {\r\n            return;\r\n        }\r\n        return callback.apply(context, arguments);\r\n    };\r\n};\r\n\r\nexport default (WrappedComponent) => {\r\n    class NativeMethodsMixin extends WrappedComponent {\r\n\r\n        /**\r\n         * Determines the location on screen, width, and height of the given view and\r\n         * returns the values via an async callback. If successful, the callback will\r\n         * be called with the following arguments:\r\n         *\r\n         *  - x\r\n         *  - y\r\n         *  - width\r\n         *  - height\r\n         *  - pageX\r\n         *  - pageY\r\n         *\r\n         * Note that these measurements are not available until after the rendering\r\n         * has been completed in native. If you need the measurements as soon as\r\n         * possible, consider using the [`onLayout`\r\n         * prop](/react-native/docs/view.html#onlayout) instead.\r\n         */\r\n        measure(callback) {\r\n            UIManager.measure(\r\n                ReactDOM.findDOMNode(this),\r\n                mountSafeCallback(this, callback)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Like [`measure()`](#measure), but measures the view relative an ancestor,\r\n         * specified as `relativeToNativeNode`. This means that the returned x, y\r\n         * are relative to the origin x, y of the ancestor view.\r\n         *\r\n         * As always, to obtain a native node handle for a component, you can use\r\n         * `ReactDOM.findDOMNode(component)`.\r\n         */\r\n        measureLayout(relativeToNativeNode, onSuccess, onFail) {\r\n            UIManager.measureLayout(\r\n                ReactDOM.findDOMNode(this),\r\n                relativeToNativeNode,\r\n                mountSafeCallback(this, onFail),\r\n                mountSafeCallback(this, onSuccess)\r\n            );\r\n        }\r\n\r\n        /**\r\n         * This function sends props straight to native. They will not participate in\r\n         * future diff process - this means that if you do not include them in the\r\n         * next render, they will remain active (see [Direct\r\n         * Manipulation](/react-native/docs/direct-manipulation.html)).\r\n         */\r\n        setNativeProps(nativeProps) {\r\n            setNativeProps_import(ReactDOM.findDOMNode(this), nativeProps, this);\r\n        }\r\n\r\n        /**\r\n         * Requests focus for the given input or view. The exact behavior triggered\r\n         * will depend on the platform and type of view.\r\n         */\r\n        focus() {\r\n            ReactDOM.findDOMNode(this).focus();\r\n        }\r\n\r\n        /**\r\n         * Removes focus from an input or view. This is the opposite of `focus()`.\r\n         */\r\n        blur() {\r\n            ReactDOM.findDOMNode(this).blur();\r\n        }\r\n    }\r\n\r\n    return NativeMethodsMixin\r\n}\r\n\r\n\r\n\r\n\r\n"]}