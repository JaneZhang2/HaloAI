{"version":3,"sources":["../../.npm-global/lib/node_modules/@ctrip/cw/node_modules/lodash/debounce.js"],"names":["isObject","require","now","toNumber","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","debounced","isInvoking","arguments","cancel","clearTimeout","flush","module","exports"],"mappings":"AAAA,GAAIA,UAAWC,QAAQ,YAAR,CAAf;AACIC,IAAMD,QAAQ,OAAR,CADV;AAEIE,SAAWF,QAAQ,YAAR,CAFf;;;AAKA,GAAIG,iBAAkB,qBAAtB;;;AAGA,GAAIC,WAAYC,KAAKC,GAArB;AACIC,UAAYF,KAAKG,GADrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,QAASC,SAAT,CAAkBC,IAAlB,CAAwBC,IAAxB,CAA8BC,OAA9B,CAAuC;AACrC,GAAIC,SAAJ;AACIC,QADJ;AAEIC,OAFJ;AAGIC,MAHJ;AAIIC,OAJJ;AAKIC,YALJ;AAMIC,eAAiB,CANrB;AAOIC,QAAU,KAPd;AAQIC,OAAS,KARb;AASIC,SAAW,IATf;;AAWA,GAAI,MAAOZ,KAAP,EAAe,UAAnB,CAA+B;AAC7B,KAAM,IAAIa,UAAJ,CAAcpB,eAAd,CAAN;AACD;AACDQ,KAAOT,SAASS,IAAT,GAAkB,CAAzB;AACA,GAAIZ,SAASa,OAAT,CAAJ,CAAuB;AACrBQ,QAAU,CAAC,CAACR,QAAQQ,OAApB;AACAC,OAAS,WAAaT,QAAtB;AACAG,QAAUM,OAASjB,UAAUF,SAASU,QAAQG,OAAjB,GAA6B,CAAvC,CAA0CJ,IAA1C,CAAT,CAA2DI,OAArE;AACAO,SAAW,YAAcV,QAAd,CAAwB,CAAC,CAACA,QAAQU,QAAlC,CAA6CA,QAAxD;AACD;;AAED,QAASE,WAAT,CAAoBC,IAApB,CAA0B;AACxB,GAAIC,MAAOb,QAAX;AACIc,QAAUb,QADd;;AAGAD,SAAWC,SAAWc,SAAtB;AACAT,eAAiBM,IAAjB;AACAT,OAASN,KAAKmB,KAAL,CAAWF,OAAX,CAAoBD,IAApB,CAAT;AACA,MAAOV,OAAP;AACD;;AAED,QAASc,YAAT,CAAqBL,IAArB,CAA2B;;AAEzBN,eAAiBM,IAAjB;;AAEAR,QAAUc,WAAWC,YAAX,CAAyBrB,IAAzB,CAAV;;AAEA,MAAOS,SAAUI,WAAWC,IAAX,CAAV,CAA6BT,MAApC;AACD;;AAED,QAASiB,cAAT,CAAuBR,IAAvB,CAA6B;AAC3B,GAAIS,mBAAoBT,KAAOP,YAA/B;AACIiB,oBAAsBV,KAAON,cADjC;AAEIiB,YAAczB,KAAOuB,iBAFzB;;AAIA,MAAOb;AACHd,UAAU6B,WAAV,CAAuBrB,QAAUoB,mBAAjC,CADG;AAEHC,WAFJ;AAGD;;AAED,QAASC,aAAT,CAAsBZ,IAAtB,CAA4B;AAC1B,GAAIS,mBAAoBT,KAAOP,YAA/B;AACIiB,oBAAsBV,KAAON,cADjC;;;;;AAMA,MAAQD,gBAAiBU,SAAjB,EAA+BM,mBAAqBvB,IAApD;AACLuB,kBAAoB,CADf,EACsBb,QAAUc,qBAAuBpB,OAD/D;AAED;;AAED,QAASiB,aAAT,EAAwB;AACtB,GAAIP,MAAOxB,KAAX;AACA,GAAIoC,aAAaZ,IAAb,CAAJ,CAAwB;AACtB,MAAOa,cAAab,IAAb,CAAP;AACD;;AAEDR,QAAUc,WAAWC,YAAX,CAAyBC,cAAcR,IAAd,CAAzB,CAAV;AACD;;AAED,QAASa,aAAT,CAAsBb,IAAtB,CAA4B;AAC1BR,QAAUW,SAAV;;;;AAIA,GAAIN,UAAYT,QAAhB,CAA0B;AACxB,MAAOW,YAAWC,IAAX,CAAP;AACD;AACDZ,SAAWC,SAAWc,SAAtB;AACA,MAAOZ,OAAP;AACD;;;;;;;;;;;;;;AAcD,QAASuB,UAAT,EAAqB;AACnB,GAAId,MAAOxB,KAAX;AACIuC,WAAaH,aAAaZ,IAAb,CADjB;;AAGAZ,SAAW4B,SAAX;AACA3B,SAAW,IAAX;AACAI,aAAeO,IAAf;;AAEA,GAAIe,UAAJ,CAAgB;AACd,GAAIvB,UAAYW,SAAhB,CAA2B;AACzB,MAAOE,aAAYZ,YAAZ,CAAP;AACD;AACD,GAAIG,MAAJ,CAAY;;AAEVJ,QAAUc,WAAWC,YAAX,CAAyBrB,IAAzB,CAAV;AACA,MAAOa,YAAWN,YAAX,CAAP;AACD;AACF;AACD,GAAID,UAAYW,SAAhB,CAA2B;AACzBX,QAAUc,WAAWC,YAAX,CAAyBrB,IAAzB,CAAV;AACD;AACD,MAAOK,OAAP;AACD;AACDuB,UAAUG,MAAV,CAnCA,UAAkB,CAChB,GAAIzB,UAAYW,SAAhB,CAA2B,CACzBe,aAAa1B,OAAb,EACD,CACDE,eAAiB,CAAjB,CACAN,SAAWK,aAAeJ,SAAWG,QAAUW,SAA/C,CACD,CA6BD;AACAW,UAAUK,KAAV,CA5BA,UAAiB,CACf,MAAO3B,WAAYW,SAAZ,CAAwBZ,MAAxB,CAAiCsB,aAAarC,KAAb,CAAxC,CACD,CA0BD;AACA,MAAOsC,UAAP;AACD;;AAEDM,OAAOC,OAAP,CAAiBrC,QAAjB","file":"debounce.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n"]}