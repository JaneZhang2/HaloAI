{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/modules/dangerousStyleValue.js"],"names":["dangerousStyleValue","name","value","isEmpty","isNonNumeric","isNaN","isUnitlessNumber","hasOwnProperty","trim","global","fontSizeBase","parseFloat","val","toFixed"],"mappings":";AACA,a;;AAEA,0E;;;;;;;;;;;AAWA,QAASA,oBAAT,CAA6BC,IAA7B,CAAmCC,KAAnC,CAA0C;;AAEtC,GAAIC,SAAUD,OAAS,IAAT,EAAiB,MAAOA,MAAP,GAAiB,SAAlC,EAA+CA,QAAU,EAAvE;AACA,GAAIC,OAAJ,CAAa;AACT,MAAO,EAAP;AACH;;AAED,GAAIC,cAAeC,MAAMH,KAAN,CAAnB;AACA,GAAIE,cAAgBF,QAAU,CAA1B,EAA+BI,2BAAiBC,cAAjB,CAAgCN,IAAhC,GAAyCK,2BAAiBL,IAAjB,CAA5E,CAAoG;AAChG,MAAO,GAAKC,KAAZ;AACH;;AAED,GAAI,MAAOA,MAAP,GAAiB,QAArB,CAA+B;AAC3BA,MAAQA,MAAMM,IAAN,EAAR;AACH;AACD,GAAGC,OAAOC,YAAV,CAAuB;AACnBR,MAASS,WAAW,CAAEC,IAAMH,OAAOC,YAAf,EAA8BG,OAA9B,CAAsC,CAAtC,CAAX,EAAuD,KAAhE;AACH,CAFD,IAEK;AACDX,MAASS,WAAW,CAAEC,IAAM,GAAR,EAAcC,OAAd,CAAsB,CAAtB,CAAX,EAAuC,KAAhD;AACH;;AAED,MAAOX,MAAP;AACH,C;;;AAGcF,mB","file":"dangerousStyleValue.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["\r\n'use strict';\r\n\r\nimport isUnitlessNumber from './react-lib/CSSProperty/isUnitlessNumber';\r\n/**\r\n * Convert a value into the proper css writable value. The style name `name`\r\n * should be logical (no hyphens), as specified\r\n * in `CSSProperty.isUnitlessNumber`.\r\n *\r\n * @param {string} name CSS property name such as `topMargin`.\r\n * @param {*} value CSS property value such as `10px`.\r\n * @param {ReactDOMComponent} component\r\n * @return {string} Normalized style value with dimensions applied.\r\n */\r\nfunction dangerousStyleValue(name, value) {\r\n\r\n    var isEmpty = value == null || typeof value === 'boolean' || value === '';\r\n    if (isEmpty) {\r\n        return '';\r\n    }\r\n\r\n    var isNonNumeric = isNaN(value);\r\n    if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\r\n        return '' + value; // cast to string\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n        value = value.trim();\r\n    }\r\n    if(global.fontSizeBase){\r\n        value =  parseFloat(((val / global.fontSizeBase)).toFixed(5)) + 'rem'\r\n    }else{\r\n        value =  parseFloat(((val / 100)).toFixed(5)) + 'rem'\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n\r\nexport default dangerousStyleValue;"]}