{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/apis/UIManager/index.web.js"],"names":["_cw_scale","Dimensions","get","scale","_measureLayout","node","relativeToNativeNode","callback","relativeNode","parentNode","relativeRect","getBoundingClientRect","layout","height","Math","round","left","top","width","x","y","UIManager","blur","err","focus","measure","measureInWindow","measureLayout","onFail","onSuccess","relativeTo","updateView","props","prop","nativeProp","value","className","getAttribute","setAttribute","RCTVideo","Constants","ScaleToFill","ScaleAspectFit","ScaleAspectFill","ScaleNone"],"mappings":"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","file":"index.web.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["import setValueForStyles from './../../modules/setValueForStyles'\r\nimport Dimensions from './../../apis/Dimensions/index.web';\r\n\r\nlet _cw_scale = Dimensions.get('window').scale;\r\nlet _measureLayout = function (node, relativeToNativeNode, callback) {\r\n    let relativeNode = relativeToNativeNode || node.parentNode\r\n    let relativeRect = relativeNode.getBoundingClientRect()\r\n    // getBoundingClientRect会返回小数，在浏览器会有问题，因此做一个四舍五入\r\n    let layout = node.getBoundingClientRect(),\r\n        height = Math.round(layout.height / _cw_scale),\r\n        left = Math.round(layout.left / _cw_scale),\r\n        top = Math.round(layout.top / _cw_scale),\r\n        width = Math.round(layout.width / _cw_scale)\r\n    let x = left - relativeRect.left / _cw_scale\r\n    let y = top - relativeRect.top / _cw_scale\r\n    callback(x, y, width, height, left, top)\r\n}\r\n\r\nconst UIManager = {\r\n    /**\r\n     * @method UIManager.blur\r\n     * @param {object} node 元素节点\r\n     * @description 触发元素节点的blur()方法\r\n     */\r\n    blur(node) {\r\n        try {\r\n            node.blur()\r\n        } catch (err) {\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @method UIManager.focus\r\n     * @param {object} node 元素节点\r\n     * @description 触发元素节点的focus()方法\r\n     */\r\n    focus(node) {\r\n        try {\r\n            node.focus()\r\n        } catch (err) {/*console.log(node)*/\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @method UIManager.measure\r\n     * @param {object} node 元素节点\r\n     * @param {function} callback 回调方法\r\n     * @description 计算指定节点相对于父节点显示的位置和尺寸，通过一个异步回调返回计算的结果。如果成功，回调函数会被调用，并带有以下参数：\r\n     * - x\r\n     * - y\r\n     * - width\r\n     * - height\r\n     * - left\r\n     * - top\r\n     */\r\n    measure(node, callback) {\r\n        if (!node) return\r\n        _measureLayout(node, null, callback)\r\n    },\r\n\r\n    /**\r\n     * @method UIManager.measureInWindow\r\n     * @param {object} node 元素节点\r\n     * @param {function} callback 回调方法\r\n     * @description 计算指定节点在屏幕上显示的位置和尺寸，通过一个异步回调返回计算的结果。参数为`left,top,width,height`。\r\n     */\r\n    measureInWindow(node, callback) {\r\n        const {height, left, top, width} = node.getBoundingClientRect()\r\n        callback(left, top, width, height)\r\n    },\r\n\r\n\r\n    /**\r\n     * @method UIManager.measureLayout\r\n     * @param {object} node 元素节点\r\n     * @param {object} relativeToNativeNode 指定祖先节点，不存在则默认为父节点。\r\n     * @param {function} onFail 获取失败的回调函数\r\n     * @param {function} onSuccess 获取成功的回调函数\r\n     * @description 计算指定节点相对于指定祖先节点在屏幕上显示的位置和尺寸，通过一个异步回调返回计算的结果。如果成功，调用获取成功的回调函数，参数和`measure`callback函数相同。获取失败则调用失败的回调函数。\r\n     */\r\n    measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\r\n        const relativeTo = relativeToNativeNode || node.parentNode\r\n\r\n        _measureLayout(node, relativeTo, onSuccess)\r\n    },\r\n\r\n    /**\r\n     * @method UIManager.updateView\r\n     * @param {object} node 元素节点\r\n     * @param {object} props props对象\r\n     * @description 根据props对象刷新视图。\r\n     */\r\n    updateView(node, props) {\r\n        for (const prop in props) {\r\n            let nativeProp\r\n            const value = props[prop]\r\n\r\n            switch (prop) {\r\n                case 'style':\r\n                    // convert styles to DOM-styles\r\n                    setValueForStyles(node, value)\r\n                    break\r\n                case 'class':\r\n                case 'className':\r\n                    nativeProp = 'class'\r\n                    // prevent class names managed by React Native from being replaced\r\n                    const className = node.getAttribute(nativeProp) + ' ' + value\r\n                    node.setAttribute(nativeProp, className)\r\n                    break\r\n                case 'text':\r\n                case 'value':\r\n                    // native platforms use `text` prop to replace text input value\r\n                    node.value = value\r\n                    break\r\n                default:\r\n                    node.setAttribute(prop, value)\r\n            }\r\n        }\r\n    },\r\n    RCTVideo: {\r\n        Constants:{\r\n            ScaleToFill:\"ScaleToFill\",\r\n            ScaleAspectFit:\"ScaleAspectFit\",\r\n            ScaleAspectFill:\"ScaleAspectFill\",\r\n            ScaleNone:\"ScaleNone\",\r\n        }\r\n    }\r\n}\r\n\r\nexport default UIManager\r\n"]}