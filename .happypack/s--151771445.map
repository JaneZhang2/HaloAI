{"version":3,"sources":["node_modules/@ctrip/crnweb/src/react-native/components/Text/Text.web.js"],"names":["Text","props","state","touchableGetInitialState","isHighlighted","onPress","onLongPress","_handlers","onStartShouldSetResponder","e","touchableHandleStartShouldSetResponder","onResponderTerminationRequest","onResponderGrant","d","touchableHandleResponderGrant","onResponderMove","touchableHandleResponderMove","onResponderRelease","touchableHandleResponderRelease","onResponderTerminate","touchableHandleResponderTerminate","suppressHighlighting","setState","children","ellipsizeMode","resultString","isAllString","Array","isArray","aindex","length","toString","style","StyleSheet","fix","numberOfLines","fontSizeBase","global","lineHeight","parseFloat","fontSize","numberOfLinesStyle","overflow","textOverflow","wordWrap","maxHeight","wordBreak","display","WebkitLineClamp","WebkitBoxOrient","backgroundColor","fsize","htmlFontSizeStyle","fontSizeBaseScale","fminSize","toFixed","hackStyle","alignItems","transform","scale","whiteSpace","Component","defaultProps","displayName"],"mappings":"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","file":"Text.web.js","sourceRoot":"/Users/jane/Documents/HaloAI","sourcesContent":["\r\n\r\nimport React,{Component} from 'react';\r\nimport StyleSheet from './../../apis/StyleSheet/StyleSheet.web';\r\nimport TouchableWrapper from './../Touchable/Touchable.web'\r\nimport NativeMethodsWrapper from './../../modules/wrapper/NativeMethodsWrapper/index.web';\r\n\r\n\r\n\r\n/**\r\n * Text组件\r\n *\r\n * @component Text\r\n * @version >=v1.4.0\r\n * @example ./Text.js[1-76]\r\n * @description  Text是一个用于显示文本的React组件。\r\n *\r\n * **注意**在web端，默认的fontSize是14px，如果没有显式的设置lineHeight，会默认设置为fontSize*1.2。\r\n *\r\n * ![Text](./images/component/Text.gif)\r\n *\r\n */\r\nclass Text extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            ...this.touchableGetInitialState(),\r\n            isHighlighted: false,\r\n        }\r\n    }\r\n    static defaultProps = {\r\n            ellipsizeMode: 'tail',\r\n    }\r\n\r\n    componentWillMount(){\r\n        if(!!this.props.onPress || !!this.props.onLongPress){\r\n            this._handlers = {\r\n                onStartShouldSetResponder : (e)=>{\r\n                   return this.touchableHandleStartShouldSetResponder(e)\r\n                },\r\n                onResponderTerminationRequest : (e)=>{\r\n                    return this.touchableHandleStartShouldSetResponder(e)\r\n                },\r\n                onResponderGrant : (e,d)=>{\r\n                    return this.touchableHandleResponderGrant(e,d)\r\n                },\r\n                onResponderMove :  (e)=>{\r\n                    return this.touchableHandleResponderMove(e)\r\n                },\r\n                onResponderRelease : (e)=>{\r\n                    return this.touchableHandleResponderRelease(e)\r\n                },\r\n                onResponderTerminate : (e)=>{\r\n                    return this.touchableHandleResponderTerminate(e)\r\n                },\r\n            };\r\n        }else{\r\n            this._handlers = {}\r\n        }\r\n    }\r\n\r\n    touchableHandleActivePressIn() {\r\n        if (this.props.suppressHighlighting) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            isHighlighted: true,\r\n        });\r\n    }\r\n\r\n    touchableHandleActivePressOut() {\r\n        if (this.props.suppressHighlighting) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            isHighlighted: false,\r\n        });\r\n    }\r\n\r\n    touchableHandlePress(e) {\r\n        this.props.onPress && this.props.onPress(e);\r\n    }\r\n\r\n    touchableHandleLongPress(e){\r\n        this.props.onLongPress && this.props.onLongPress(e);\r\n    }\r\n\r\n    render() {\r\n        let {children,ellipsizeMode,...props}= this.props;\r\n        let resultString=\"\",isAllString=true;\r\n        if(Array.isArray(children)){\r\n\r\n            for(let aindex =0; aindex<children.length;aindex++){\r\n                if(typeof(children[aindex]) ==\"string\" ||  typeof(children[aindex]) ==\"number\"){\r\n                    resultString+=children[aindex].toString();\r\n                }else{\r\n                    isAllString=false;\r\n                }\r\n            }\r\n        }else{\r\n            isAllString=false;\r\n        }\r\n        if( isAllString){\r\n            children =resultString;\r\n        }\r\n\r\n        // Object\r\n        let style = StyleSheet.fix(props.style || {});\r\n\r\n        if (typeof props.numberOfLines === 'number'){\r\n            // 默认的lineHeight为1.2（在html的class里）\r\n            let fontSizeBase=global.fontSizeBase||100;\r\n            let lineHeight = style.lineHeight || (parseFloat(style.fontSize) * fontSizeBase || 14) * 1.2;\r\n            let numberOfLinesStyle = ellipsizeMode === 'clip' ? {\r\n                overflow: 'hidden',\r\n                textOverflow: 'clip',\r\n                wordWrap: 'break-word',\r\n                maxHeight: parseFloat(lineHeight) * props.numberOfLines * fontSizeBase,\r\n            } : {\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                wordWrap: 'break-word',\r\n\t            wordBreak: 'break-all',//fix:数字和英文单词换行问题（Issue #402）\r\n                display: '-webkit-box',\r\n                WebkitLineClamp: props.numberOfLines,\r\n                WebkitBoxOrient: 'vertical',\r\n                maxHeight: parseFloat(lineHeight) * props.numberOfLines * fontSizeBase,\r\n            };\r\n            style = Object.assign(style, StyleSheet.fix(numberOfLinesStyle));\r\n        }\r\n\r\n        if (this.state.isHighlighted){\r\n            style.backgroundColor = '#f1f1f1';\r\n        }\r\n\r\n        // 处理字体小于12px\r\n        let fsize = parseFloat(style.fontSize);\r\n        let htmlFontSizeStyle=global.fontSizeBaseScale||100;\r\n        let fminSize= parseFloat(12/htmlFontSizeStyle).toFixed(5);//px转为rem时固定截取5位小数点，故此处也应为5位小数点，否则比较时会出错，如12/22.5=0.533333333333 > 0.53333\r\n        if (fsize < fminSize) {\r\n            fsize = parseFloat((fsize / fminSize).toFixed(5));\r\n            // let hackStyle = StyleSheet.fix({fontSize: 12, display: 'inline-block',transform:[{scale:fsize}]});\r\n            let hackStyle = StyleSheet.fix({fontSize: 11.5, display: 'inline-flex',alignItems:'baseline', transform:[{scale:fsize}]});\r\n            children = (<span style={hackStyle}>{children}</span>);\r\n        }\r\n        /**\r\n         * 修复Text中'\\n'换行符问题，修复后Text支持'\\n'换行符。\r\n         * 参考关于'white-space:pre'的说明https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space\r\n         */\r\n        style.whiteSpace = 'pre-wrap';//与crn保持一致：保留空白符\r\n        style.wordWrap = 'break-word';//修复一长串英文字符遇到边界不会自动换行问题，英文的换行单位为单词，解析单词的时候是以空格为准，而一长串英文字符被浏览器认为是一个单词，默认单词内部是不能换行。\r\n        style.wordBreak= 'break-word';\r\n        props.style = style;\r\n\r\n        return (\r\n            <div className='rn-text'  {...props} {...this._handlers} >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nText.propTypes = {};\r\nText = NativeMethodsWrapper(Text);\r\nText = TouchableWrapper(Text);\r\nText.displayName=\"Text\";\r\nexport default Text;\r\n\r\n\r\n"]}